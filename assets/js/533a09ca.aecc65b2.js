"use strict";(self.webpackChunkwasm_edge=self.webpackChunkwasm_edge||[]).push([[607],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>g});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),m=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=m(a),d=r,g=p["".concat(s,".").concat(d)]||p[d]||u[d]||o;return a?n.createElement(g,l(l({ref:t},c),{},{components:a})):n.createElement(g,l({ref:t},c))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var m=2;m<o;m++)l[m]=a[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5802:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>m});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_position:3},l="Running WASM with WasmEdge CLI",i={unversionedId:"tutorial-basics/create-a-blog-post",id:"tutorial-basics/create-a-blog-post",title:"Running WASM with WasmEdge CLI",description:"After installing WasmEdge or starting the WasmEdge app dev Docker container, there are several ways to run WebAssembly programs.",source:"@site/docs/tutorial-basics/create-a-blog-post.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/create-a-blog-post",permalink:"/my-wasmu-website/docs/tutorial-basics/create-a-blog-post",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/create-a-blog-post.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Using WasmEdge in Docker",permalink:"/my-wasmu-website/docs/tutorial-basics/create-a-document"},next:{title:"2. Unistallation",permalink:"/my-wasmu-website/docs/Unistallation"}},s={},m=[{value:"Wasmedge CLI",id:"wasmedge-cli",level:2},{value:"Call A WebAssembly Function Written in WAT",id:"call-a-webassembly-function-written-in-wat",level:2},{value:"Call A WebAssembly Function Compiled From Rust",id:"call-a-webassembly-function-compiled-from-rust",level:2},{value:"Execute A Standalone WebAssembly Program: Hello world",id:"execute-a-standalone-webassembly-program-hello-world",level:2},{value:"Wasmedgec CLI",id:"wasmedgec-cli",level:2}],c={toc:m},p="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"running-wasm-with-wasmedge-cli"},"Running WASM with WasmEdge CLI"),(0,r.kt)("p",null,"After ",(0,r.kt)("a",{parentName:"p",href:"https://wasmedge.org/book/en/quick_start/install.html"},"installing WasmEdge")," or starting the ",(0,r.kt)("a",{parentName:"p",href:"https://wasmedge.org/book/en/quick_start/use_docker.html"},"WasmEdge app dev Docker container"),", there are several ways to run WebAssembly programs."),(0,r.kt)("h2",{id:"wasmedge-cli"},"Wasmedge CLI"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"wasmedge")," binary is a ",(0,r.kt)("inlineCode",{parentName:"p"},"command line interface (CLI)")," program that runs WebAssembly programs."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If the WebAssembly program contains a ",(0,r.kt)("inlineCode",{parentName:"li"},"main()")," function, ",(0,r.kt)("inlineCode",{parentName:"li"},"wasmedge")," would execute it as a standalone program in the command mode."),(0,r.kt)("li",{parentName:"ul"},"If the WebAssembly program contains one or more exported public functions, ",(0,r.kt)("inlineCode",{parentName:"li"},"wasmedge")," could invoke individual functions in the reactor mode.\nBy default, the ",(0,r.kt)("inlineCode",{parentName:"li"},"wasmedge")," will execute WebAssembly programs in interpreter mode, and ",(0,r.kt)("a",{parentName:"li",href:"https://wasmedge.org/book/en/quick_start/run_in_aot_mode.html"},(0,r.kt)("inlineCode",{parentName:"a"},"execute the AOT-compiled .so, .dylib, .dll, or .wasm (universal output format) in AOT mode")),". If you want to accelerate the WASM execution, we recommend to ",(0,r.kt)("a",{parentName:"li",href:"https://wasmedge.org/book/en/quick_start/run_cli.html#wasmedgec-cli"},(0,r.kt)("inlineCode",{parentName:"a"},"compile the WebAssembly with the AOT compiler first")),".")),(0,r.kt)("p",null,"Users can run the ",(0,r.kt)("inlineCode",{parentName:"p"},"wasmedge -h")," for realizing the command line options quickly, or ",(0,r.kt)("a",{parentName:"p",href:"https://wasmedge.org/book/en/cli/wasmedge.html"},(0,r.kt)("inlineCode",{parentName:"a"},"refer to the detailed wasmedge CLI options here")),"."),(0,r.kt)("h2",{id:"call-a-webassembly-function-written-in-wat"},"Call A WebAssembly Function Written in WAT"),(0,r.kt)("p",null,"We created the hand-written fibonacci.wat and used the wat2wasm tool to convert it into the fibonacci.wasm WebAssembly program. It exported a fib() function which takes a single i32 integer as the input parameter. We can execute wasmedge in reactor mode to invoke the exported function."),(0,r.kt)("p",null,"You can run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wasmedge --reactor fibonacci.wasm fib 10\n")),(0,r.kt)("p",null,"The output will be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"89\n")),(0,r.kt)("h2",{id:"call-a-webassembly-function-compiled-from-rust"},"Call A WebAssembly Function Compiled From Rust"),(0,r.kt)("p",null,"The add.wasm WebAssembly program contains an exported add() function, which is compiled from Rust. Checkout its Rust source code project here. We can execute wasmedge in reactor mode to invoke the add() function with two i32 integer input parameters."),(0,r.kt)("p",null,"You can run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wasmedge --reactor add.wasm add 2 2\n")),(0,r.kt)("p",null,"The output will be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"4\n")),(0,r.kt)("h2",{id:"execute-a-standalone-webassembly-program-hello-world"},"Execute A Standalone WebAssembly Program: Hello world"),(0,r.kt)("p",null,"The hello.wasm WebAssembly program contains a main() function. Checkout its Rust source code project here. It prints out hello followed by the command line arguments."),(0,r.kt)("p",null,"You can run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wasmedge hello.wasm second state\n")),(0,r.kt)("p",null,"The output will be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"hello\nsecond\nstate\n")),(0,r.kt)("h2",{id:"wasmedgec-cli"},"Wasmedgec CLI"),(0,r.kt)("p",null,"The wasmedgec binary is a CLI program to compile WebAssembly into native machine code (i.e., the AOT compiler). For the pure WebAssembly, the wasmedge tool will execute the WASM in interpreter mode. After compiling with the AOT compiler, the wasmedge tool can execute the WASM in AOT mode which is much faster."),(0,r.kt)("p",null,"The options and flags for the wasmedgec are as follows."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Input Wasm file(/path/to/input/wasm/file).")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Output file name(/path/to/output/file)."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"By default, it will generate the universal Wasm binary format."),(0,r.kt)("li",{parentName:"ul"},"Users can still generate native binary only by specifying the .so, .dylib, or .dll extensions.")))),(0,r.kt)("p",null,"Users can run the wasmedgec -h for realizing the command line options quickly, or refer to the detailed wasmedgec CLI options here."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# This is slow in interpreter mode.\nwasmedge app.wasm\n\n# AOT compilation.\nwasmedgec app.wasm app_aot.wasm\n\n# This is now MUCH faster in AOT mode.\nwasmedge app_aot.wasm\n")))}u.isMDXComponent=!0}}]);